# ---------------------------------------------------------------------------
# ReclassNLCDRasters.py
# Created on: Wed Aug 12 2009 01:13:00 PM
#   (generated by ArcGIS/ModelBuilder)
# ---------------------------------------------------------------------------

# Import system modules
import sys, string, os, arcpy, arcgisscripting

class TileInfo:
    def __init__(self, dpi, width, height, originX, originY, lods, spatialReference):
        self.dpi = dpi
        self.width = width
        self.height = height
        self.originX = originX
        self.originY = originY
        self.lods = lods
        self.spatialReference = spatialReference


class LOD:
    def __init__(self, level, resolution, scale):
        self.level = level
        self.resolution = resolution
        self.scale = scale


def vertex_index (col, row):
    return -(((col & 0xFFFF) << 16) + (row & 0xFFFF))


def create_grid (tileInfo, level, feature_class):
    spatial_ref = arcpy.SpatialReference("C:/Program Files (x86)/ArcGIS/Desktop10.0/Coordinate Systems/Projected Coordinate Systems/World/WGS 1984 Web Mercator (Auxiliary Sphere).prj")
    spatial_ref.setMDomain(-137434824702, 0)
    arcpy.env.overwriteOutput = True
    arcpy.CreateFeatureclass_management(os.path.dirname(feature_class), 
                                        os.path.basename(feature_class),
                                        "POLYGON", 
                                        "#", 
                                        "ENABLED", 
                                        "DISABLED", 
                                        spatial_ref)
    lod = tileInfo.lods[level]
    width = tileInfo.width * lod.resolution
    height = tileInfo.height * lod.resolution
    maxX = -(tileInfo.originX + width)
    minY = -(tileInfo.originY - height)
    cursor = arcpy.InsertCursor(feature_class)
    ring = arcpy.Array()
    point = arcpy.Point()
    x = tileInfo.originX
    colNum = 0
    while (x < maxX):
        y = tileInfo.originY
        rowNum = 0
        while (y > minY):
            point.ID, point.X, point.Y, point.M = (0, x, y, vertex_index(colNum, rowNum))
            ring.add(point)
            point.ID, point.X, point.Y, point.M = (1, x + width, y, vertex_index(colNum + 1, rowNum))
            ring.add(point)
            point.ID, point.X, point.Y, point.M = (2, x + width, y - height, vertex_index(colNum + 1, rowNum + 1))
            ring.add(point)
            point.ID, point.X, point.Y, point.M = (3, x, y - height, vertex_index(colNum, rowNum + 1))
            ring.add(point)
            point.ID, point.X, point.Y, point.M = (4, x, y, vertex_index(colNum, rowNum))
            ring.add(point)
            feat = cursor.newRow()
            feat.shape = arcpy.Polygon(ring)
            cursor.insertRow(feat)
            ring.removeAll()
            y = y - height
            rowNum = rowNum + 1
        x = x + width
        colNum = colNum + 1
    del cursor


def copy_to_m (in_fc, out_fc):
    arcpy.CreateFeatureclass_management(os.path.dirname(out_fc), 
                                        os.path.basename(out_fc),
                                        "POLYGON", 
                                        "#", 
                                        "ENABLED", 
                                        "DISABLED")
    arcpy.Append_management(in_fc, out_fc)
    

def label_vertices (feature_class, first_index=0):
    shape_name = arcpy.Describe(feature_class).shapeFieldName
    rows = arcpy.UpdateCursor(feature_class)
    index = first_index
    for row in rows:
        polygon = row.getValue(shape_name)
        for part_index in range(0, polygon.partCount):
            ring = polygon.getPart(part_index)
            point = ring.next()
            while point:
                print point
                point.M = index
                print point
                index += 1
                point = ring.next()
                if not point:
                    point = ring.next()
        rows.updateRow(row)
    del rows

def simplify_and_clip (input_fc, grid_fc, max_offset, output_workspace):
    arcpy.env.MDomain = "-137434824702 137434824702"
    arcpy.env.outputMFlag = "Enabled"
    arcpy.env.scratchWorkspace = "C:/Documents and Settings/Administrator/My Documents/ArcGIS/Default.gdb"
    arcpy.SimplifyPolygon_cartography(input_fc, "input_temp", "POINT_REMOVE", max_offset, max_offset * max_offset * 0.5, "RESOLVE_ERRORS", "NO_KEEP")
    arcpy.MakeFeatureLayer_management(grid_fc, "grid_temp")
    desc = arcpy.Describe("grid_temp")
    rows = arcpy.SearchCursor("grid_temp")
    index = 0
    for row in rows:
        arcpy.SelectLayerByAttribute_management("grid_temp", "NEW_SELECTION", "%s = %s" % (desc.OIDFieldName, row.getValue(desc.OIDFieldName)))
        arcpy.Intersect_analysis("input_temp;grid_temp", "%s/%s" % (output_workspace, index))
        index += 1


#labelVertices("C:/Documents and Settings/Administrator/My Documents/ArcGIS/Default.gdb/counties_m")
'''
tileInfo = TileInfo(dpi=96, width=256, height=256, originX=-20037508.342787, originY=20037508.342787,
                    lods = [ 
                        LOD(level=0, resolution=156543.033928, scale=591657527.591555),
                        LOD(level=1, resolution=78271.5169639999, scale=295828763.795777),
                        LOD(level=2, resolution=39135.7584820001, scale = 147914381.897889),
                        LOD(level=3, resolution=19567.8792409999, scale=73957190.948944)
                    ],
                    spatialReference=102100)
create_grid(tileInfo, 0, "C:/Documents and Settings/Administrator/My Documents/ArcGIS/Default.gdb/Grid2_0")
create_grid(tileInfo, 1, "C:/Documents and Settings/Administrator/My Documents/ArcGIS/Default.gdb/Grid2_1")
create_grid(tileInfo, 2, "C:/Documents and Settings/Administrator/My Documents/ArcGIS/Default.gdb/Grid2_2")
create_grid(tileInfo, 3, "C:/Documents and Settings/Administrator/My Documents/ArcGIS/Default.gdb/Grid2_3")
'''

simplify_and_clip("C:/Documents and Settings/Administrator/My Documents/ArcGIS/Default.gdb/test",
                  "C:/Documents and Settings/Administrator/My Documents/ArcGIS/Default.gdb/Grid2_2",
                  39135.758482,
                  "C:/Documents and Settings/Administrator/My Documents/ArcGIS/Default.gdb")