# ---------------------------------------------------------------------------
# watershed.py
# Created on: Sat Aug 23 2008 12:37:28 PM
#   (generated by ArcGIS/ModelBuilder)
# Usage: watershed <input_point> <Watershed_Poly> 
# ---------------------------------------------------------------------------

# "E:/GIS/cb_gp_watershed/test_point_1.shp" "E:/GIS/cb_gp_watershed/ws_out.shp"

# Import system modules
import sys, string, os, arcgisscripting

# Create the Geoprocessor object
gp = arcgisscripting.create(9.3)
gp.overwriteoutput = 1

try:
    toolShareFolder = os.path.dirname(sys.path[0]) + os.path.sep
    toolDataFolder = toolShareFolder + "ToolData" + os.path.sep
    scratchGDB = toolShareFolder + "Scratch" + os.path.sep + "scratch.gdb"
    scratchWorkspace = gp.scratchworkspace or scratchGDB
    
    # Check out spatial analyst license
    gp.CheckOutExtension("spatial")
    
    # Script arguments...
    inputPoint = sys.argv[1]
    outputFC = sys.argv[2]
    
    # Local variables...
    flowDir = toolDataFolder + "flow_dir_30sec.img"
    flowAccum = toolDataFolder + "flow_accum_30sec.img"
    pourPointRaster = gp.createscratchname("pourPoint", "", "RasterDataset", scratchWorkspace)
    watershedRaster = gp.createscratchname("watershed", "", "RasterDataset", scratchWorkspace)

    # Process: Snap Pour Point...
    gp.addmessage("Snapping pour point...")
    gp.SnapPourPoint_sa(inputPoint, flowAccum, pourPointRaster, "0.0125", "PourPoint")
    
    # Process: Watershed...
    gp.addmessage("Computing watershed...")
    gp.Watershed_sa(flowDir, pourPointRaster, watershedRaster, "Value")

    # Process: Raster to Polygon...
    gp.addmessage("Converting to polygon...")
    gp.RasterToPolygon_conversion(watershedRaster, outputFC, "NO_SIMPLIFY", "Value")

    # Process: delete the temporary pour point & watershed rasters
    gp.Delete_management(pourPointRaster, "RasterDataset")
    gp.Delete_management(watershedRaster, "RasterDataset")

    gp.CheckInExtension("spatial")    
except Exception, err:
    gp.AddError(str(err))
    gp.AddError(gp.getmessages(2))